/*
 * This file is generated by jOOQ.
 */
package ch.ffhs.savvy.savvyspring.jooq.tables;


import ch.ffhs.savvy.savvyspring.jooq.Keys;
import ch.ffhs.savvy.savvyspring.jooq.Public;
import ch.ffhs.savvy.savvyspring.jooq.tables.records.TodolistRecord;

import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Todolist extends TableImpl<TodolistRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.todoList</code>
     */
    public static final Todolist TODOLIST = new Todolist();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TodolistRecord> getRecordType() {
        return TodolistRecord.class;
    }

    /**
     * The column <code>public.todoList.id</code>.
     */
    public final TableField<TodolistRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("nextval('\"todoList_id_seq\"'::regclass)"), SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.todoList.name</code>.
     */
    public final TableField<TodolistRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.todoList.user_id</code>.
     */
    public final TableField<TodolistRecord, Integer> USER_ID = createField(DSL.name("user_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private Todolist(Name alias, Table<TodolistRecord> aliased) {
        this(alias, aliased, null);
    }

    private Todolist(Name alias, Table<TodolistRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.todoList</code> table reference
     */
    public Todolist(String alias) {
        this(DSL.name(alias), TODOLIST);
    }

    /**
     * Create an aliased <code>public.todoList</code> table reference
     */
    public Todolist(Name alias) {
        this(alias, TODOLIST);
    }

    /**
     * Create a <code>public.todoList</code> table reference
     */
    public Todolist() {
        this(DSL.name("todoList"), null);
    }

    public <O extends Record> Todolist(Table<O> child, ForeignKey<O, TodolistRecord> key) {
        super(child, key, TODOLIST);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<TodolistRecord> getPrimaryKey() {
        return Keys.TODO_PKEY;
    }

    @Override
    public Todolist as(String alias) {
        return new Todolist(DSL.name(alias), this);
    }

    @Override
    public Todolist as(Name alias) {
        return new Todolist(alias, this);
    }

    @Override
    public Todolist as(Table<?> alias) {
        return new Todolist(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Todolist rename(String name) {
        return new Todolist(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Todolist rename(Name name) {
        return new Todolist(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Todolist rename(Table<?> name) {
        return new Todolist(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super Integer, ? super String, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super Integer, ? super String, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
