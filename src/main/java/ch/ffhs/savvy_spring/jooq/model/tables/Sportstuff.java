/*
 * This file is generated by jOOQ.
 */
package ch.ffhs.savvy_spring.jooq.model.tables;


import ch.ffhs.savvy_spring.jooq.model.Keys;
import ch.ffhs.savvy_spring.jooq.model.Public;
import ch.ffhs.savvy_spring.jooq.model.tables.records.SportstuffRecord;

import java.time.LocalDateTime;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Sportstuff extends TableImpl<SportstuffRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.sportstuff</code>
     */
    public static final Sportstuff SPORTSTUFF = new Sportstuff();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SportstuffRecord> getRecordType() {
        return SportstuffRecord.class;
    }

    /**
     * The column <code>public.sportstuff.id</code>.
     */
    public final TableField<SportstuffRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.sportstuff.text</code>.
     */
    public final TableField<SportstuffRecord, String> TEXT = createField(DSL.name("text"), SQLDataType.VARCHAR(10485760), this, "");

    /**
     * The column <code>public.sportstuff.user_id</code>.
     */
    public final TableField<SportstuffRecord, Integer> USER_ID = createField(DSL.name("user_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.sportstuff.title</code>.
     */
    public final TableField<SportstuffRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.VARCHAR(1024), this, "");

    /**
     * The column <code>public.sportstuff.creation_date</code>.
     */
    public final TableField<SportstuffRecord, LocalDateTime> CREATION_DATE = createField(DSL.name("creation_date"), SQLDataType.LOCALDATETIME(6), this, "");

    private Sportstuff(Name alias, Table<SportstuffRecord> aliased) {
        this(alias, aliased, null);
    }

    private Sportstuff(Name alias, Table<SportstuffRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.sportstuff</code> table reference
     */
    public Sportstuff(String alias) {
        this(DSL.name(alias), SPORTSTUFF);
    }

    /**
     * Create an aliased <code>public.sportstuff</code> table reference
     */
    public Sportstuff(Name alias) {
        this(alias, SPORTSTUFF);
    }

    /**
     * Create a <code>public.sportstuff</code> table reference
     */
    public Sportstuff() {
        this(DSL.name("sportstuff"), null);
    }

    public <O extends Record> Sportstuff(Table<O> child, ForeignKey<O, SportstuffRecord> key) {
        super(child, key, SPORTSTUFF);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<SportstuffRecord, Integer> getIdentity() {
        return (Identity<SportstuffRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<SportstuffRecord> getPrimaryKey() {
        return Keys.SPORTSTUFF_PKEY;
    }

    @Override
    public Sportstuff as(String alias) {
        return new Sportstuff(DSL.name(alias), this);
    }

    @Override
    public Sportstuff as(Name alias) {
        return new Sportstuff(alias, this);
    }

    @Override
    public Sportstuff as(Table<?> alias) {
        return new Sportstuff(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Sportstuff rename(String name) {
        return new Sportstuff(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Sportstuff rename(Name name) {
        return new Sportstuff(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Sportstuff rename(Table<?> name) {
        return new Sportstuff(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, String, Integer, String, LocalDateTime> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super Integer, ? super String, ? super Integer, ? super String, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super Integer, ? super String, ? super Integer, ? super String, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
