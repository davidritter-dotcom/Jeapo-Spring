/*
 * This file is generated by jOOQ.
 */
package ch.ffhs.savvy_spring.jooq.model.tables;


import ch.ffhs.savvy_spring.jooq.model.Keys;
import ch.ffhs.savvy_spring.jooq.model.Public;
import ch.ffhs.savvy_spring.jooq.model.tables.records.DiaryentryRecord;

import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Diaryentry extends TableImpl<DiaryentryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.diaryentry</code>
     */
    public static final Diaryentry DIARYENTRY = new Diaryentry();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DiaryentryRecord> getRecordType() {
        return DiaryentryRecord.class;
    }

    /**
     * The column <code>public.diaryentry.entryid</code>.
     */
    public final TableField<DiaryentryRecord, Integer> ENTRYID = createField(DSL.name("entryid"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.diaryentry.content</code>.
     */
    public final TableField<DiaryentryRecord, String> CONTENT = createField(DSL.name("content"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.diaryentry.title</code>.
     */
    public final TableField<DiaryentryRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.diaryentry.user_id</code>.
     */
    public final TableField<DiaryentryRecord, String> USER_ID = createField(DSL.name("user_id"), SQLDataType.VARCHAR(30).nullable(false), this, "");

    private Diaryentry(Name alias, Table<DiaryentryRecord> aliased) {
        this(alias, aliased, null);
    }

    private Diaryentry(Name alias, Table<DiaryentryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.diaryentry</code> table reference
     */
    public Diaryentry(String alias) {
        this(DSL.name(alias), DIARYENTRY);
    }

    /**
     * Create an aliased <code>public.diaryentry</code> table reference
     */
    public Diaryentry(Name alias) {
        this(alias, DIARYENTRY);
    }

    /**
     * Create a <code>public.diaryentry</code> table reference
     */
    public Diaryentry() {
        this(DSL.name("diaryentry"), null);
    }

    public <O extends Record> Diaryentry(Table<O> child, ForeignKey<O, DiaryentryRecord> key) {
        super(child, key, DIARYENTRY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<DiaryentryRecord, Integer> getIdentity() {
        return (Identity<DiaryentryRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<DiaryentryRecord> getPrimaryKey() {
        return Keys.DIARYENTRY_PKEY;
    }

    @Override
    public Diaryentry as(String alias) {
        return new Diaryentry(DSL.name(alias), this);
    }

    @Override
    public Diaryentry as(Name alias) {
        return new Diaryentry(alias, this);
    }

    @Override
    public Diaryentry as(Table<?> alias) {
        return new Diaryentry(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Diaryentry rename(String name) {
        return new Diaryentry(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Diaryentry rename(Name name) {
        return new Diaryentry(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Diaryentry rename(Table<?> name) {
        return new Diaryentry(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Integer, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Integer, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
